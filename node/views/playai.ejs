<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>AI Tic Tac Toe Game</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      text-align: center;
      padding: 20px;
      background-color: #f5f5f5;
    }
    
    #board {
      display: grid;
      grid-template-columns: repeat(3, 100px);
      grid-gap: 2px;
      margin: 20px auto;
      width: 304px;
      background: #333;
      border-radius: 8px;
      padding: 2px;
    }
    
    .cell {
      width: 100px;
      height: 100px;
      background: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 2rem;
      font-weight: bold;
      cursor: pointer;
      user-select: none;
      border-radius: 4px;
      transition: all 0.2s;
    }
    
    .cell:hover:not(.taken) {
      background: #f0f0f0;
      transform: scale(1.05);
    }
    
    .cell.taken {
      cursor: not-allowed;
      background: #f8f9fa;
    }
    
    .cell.winning {
      background: #d4edda !important;
      color: #155724;
      animation: winning-pulse 0.5s ease-in-out;
    }
    
    @keyframes winning-pulse {
      0% { transform: scale(1); }
      50% { transform: scale(1.1); }
      100% { transform: scale(1); }
    }
    
    #gameStatus {
      font-size: 1rem;
      margin: 10px 0;
      font-weight: bold;
      min-height: 2rem;
    }
    
    #playerSymbol {
      font-size: 1.2rem;
      margin: 10px 0;
      background: #e9ecef;
      padding: 10px;
      border-radius: 5px;
      display: inline-block;
    }
    
    #turnIndicator {
      font-size: 1.1rem;
      margin: 10px 0;
      color: #666;
      min-height: 1.5rem;
    }

    /* AI-specific styles */
    .ai-status {
      background: #e7f3ff;
      border: 1px solid #b3d9ff;
      border-radius: 8px;
      padding: 15px;
      margin: 15px auto;
      max-width: 400px;
      font-size: 0.95rem;
    }

    .ai-thinking {
      background: #fff3cd;
      border-color: #ffeaa7;
      color: #856404;
      animation: thinking-pulse 1.5s ease-in-out infinite;
    }

    @keyframes thinking-pulse {
      0%, 100% { opacity: 0.8; }
      50% { opacity: 1; }
    }

    .ai-move-complete {
      background: #d1ecf1;
      border-color: #bee5eb;
      color: #0c5460;
    }

    .difficulty-badge {
      display: inline-block;
      padding: 4px 12px;
      border-radius: 12px;
      font-size: 0.8rem;
      font-weight: bold;
      margin-left: 10px;
    }

    .difficulty-easy { background: #d4edda; color: #155724; }
    .difficulty-medium { background: #fff3cd; color: #856404; }
    .difficulty-hard { background: #f8d7da; color: #721c24; }

    .opponent-info {
      background: #f8f9fa;
      border: 1px solid #dee2e6;
      border-radius: 8px;
      padding: 15px;
      margin: 15px auto;
      max-width: 400px;
      font-size: 1rem;
    }

    .opponent-name {
      font-weight: bold;
      color: #495057;
      margin-bottom: 5px;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 10px;
    }

    .timer-container {
      display: flex;
      justify-content: space-around;
      margin: 20px 0;
      font-size: 1rem;
      max-width: 400px;
      margin-left: auto;
      margin-right: auto;
    }

    .timer {
      padding: 15px;
      border: 2px solid #ccc;
      border-radius: 8px;
      min-width: 120px;
      background: white;
      transition: all 0.3s ease;
    }

    .timer.active {
      border-color: #007bff;
      background-color: #e7f3ff;
      transform: scale(1.05);
    }

    .timer.ai-active {
      border-color: #28a745;
      background-color: #d4edda;
    }

    .timer.warning {
      border-color: #dc3545;
      background-color: #f8d7da;
      color: #721c24;
      animation: pulse 1s infinite;
    }

    .timer-label {
      font-weight: bold;
      margin-bottom: 5px;
    }

    .timer-value {
      font-size: 1.2rem;
      font-family: monospace;
    }

    .connection-status {
      position: fixed;
      top: 10px;
      right: 10px;
      padding: 5px 10px;
      border-radius: 15px;
      font-size: 0.8rem;
      font-weight: bold;
    }

    .connected {
      background: #d4edda;
      color: #155724;
    }

    .disconnected {
      background: #f8d7da;
      color: #721c24;
    }

    .game-info {
      background: white;
      padding: 20px;
      border-radius: 8px;
      margin: 20px auto;
      max-width: 500px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    button {
      background: #007bff;
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 5px;
      cursor: pointer;
      font-size: 1rem;
      margin: 5px;
      transition: all 0.2s;
    }

    button:hover {
      background: #0056b3;
      transform: translateY(-1px);
    }

    button:disabled {
      background: #6c757d;
      cursor: not-allowed;
      transform: none;
    }

    button.queue-button {
      background: #28a745;
      font-weight: bold;
    }

    button.queue-button:hover {
      background: #218838;
    }

    button.ai-button {
      background: #6f42c1;
    }

    button.ai-button:hover {
      background: #5a32a3;
    }

    .button-container {
      margin-top: 20px;
    }

    .thinking-dots {
      display: inline-block;
    }

    .thinking-dots::after {
      content: '';
      animation: thinking-dots 1.5s steps(4, end) infinite;
    }

    @keyframes thinking-dots {
      0%, 20% { content: ''; }
      40% { content: '.'; }
      60% { content: '..'; }
      80%, 100% { content: '...'; }
    }

    .ai-icon {
      font-size: 1.2rem;
      margin-right: 5px;
    }
  </style>
</head>
<body>
  <div class="connection-status" id="connectionStatus">Connecting...</div>
  
  <div class="game-info">
    <div id="gameStatus">Connecting to AI game...</div>
    <div id="playerSymbol">Waiting for symbol assignment...</div>
    
    <!-- AI opponent info -->
    <div id="opponentInfo" class="opponent-info" style="display: none;">
      <div class="opponent-name">
        <span class="ai-icon">🤖</span>
        <span id="opponentName">Loading...</span>
        <span id="difficultyBadge" class="difficulty-badge">Loading...</span>
      </div>
      <div class="opponent-status-text" id="opponentStatusText">AI Ready</div>
    </div>
    
    <!-- AI status messages -->
    <div id="aiStatus" class="ai-status" style="display: none;"></div>
    
    <div id="turnIndicator">Waiting for game to start...</div>
  </div>
  
  <div class="timer-container">
    <div class="timer" id="playerXTimer">
      <div class="timer-label" id="xLabel">Player X</div>
      <div class="timer-value" id="xTimeRemaining">1:00</div>
    </div>
    <div class="timer" id="playerOTimer">
      <div class="timer-label" id="oLabel">Player O</div>
      <div class="timer-value" id="oTimeRemaining">1:00</div>
    </div>
  </div>
  
  <div id="board">
    <div class="cell" data-index="0"></div>
    <div class="cell" data-index="1"></div>
    <div class="cell" data-index="2"></div>
    <div class="cell" data-index="3"></div>
    <div class="cell" data-index="4"></div>
    <div class="cell" data-index="5"></div>
    <div class="cell" data-index="6"></div>
    <div class="cell" data-index="7"></div>
    <div class="cell" data-index="8"></div>
  </div>

  <div class="button-container">
    <button onclick="window.location.href='/home'">Return Home</button>
    <button id="newAIGameButton" class="ai-button" style="display: none;" onclick="window.location.href='/play-ai'">Play AI Again</button>
    <button id="newGameButton" class="queue-button" style="display: none;" onclick="window.location.href='/queue'">Queue vs Humans</button>
  </div>

  <script id="server-data" type="application/json">
    <%- JSON.stringify({ gameId, playerId, difficulty, aiName, guest }) %>
  </script>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();

    // Parse server data
    const serverData = JSON.parse(document.getElementById('server-data').textContent);
    const { gameId, playerId, difficulty, aiName, guest: isGuest } = serverData;

    // Game state
    let playerSymbol = null;
    let playerIndex = null;
    let currentTurn = null;
    let gameActive = true;
    let timerInterval = null;
    let opponentAIName = serverData.aiName || 'AI'; // Renamed to avoid conflict
    let currentTurn = null;
    let gameActive = true;
    let timerInterval = null;
    let aiName = serverData.aiName || 'AI';

    // Timer state
    let baseTimers = {};
    let turnStartTime = null;
    let currentTurnPlayerId = null;
    let localTimerInterval = null;

    // DOM elements
    const boardEl = document.getElementById("board");
    const turnEl = document.getElementById("turnIndicator");
    const symbolEl = document.getElementById("playerSymbol");
    const gameStatusEl = document.getElementById("gameStatus");
    const connectionStatusEl = document.getElementById("connectionStatus");
    const opponentInfoEl = document.getElementById("opponentInfo");
    const opponentNameEl = document.getElementById("opponentName");
    const difficultyBadgeEl = document.getElementById("difficultyBadge");
    const aiStatusEl = document.getElementById("aiStatus");
    const xTimerEl = document.getElementById("xTimeRemaining");
    const oTimerEl = document.getElementById("oTimeRemaining");
    const xTimerContainer = document.getElementById("playerXTimer");
    const oTimerContainer = document.getElementById("playerOTimer");
    const newAIGameButton = document.getElementById("newAIGameButton");
    const newGameButton = document.getElementById("newGameButton");

    console.log('AI Game page loaded. GameID:', gameId, 'PlayerID:', playerId, 'Difficulty:', difficulty);

    // Utility functions
    function formatTime(ms) {
      ms = Math.max(0, Math.floor(ms));
      const totalSeconds = Math.ceil(ms / 1000);
      const mins = Math.floor(totalSeconds / 60);
      const secs = totalSeconds % 60;
      return `${mins}:${secs.toString().padStart(2, '0')}`;
    }

    function updateOpponentInfo(name, difficulty) {
      opponentInfoEl.style.display = 'block';
      opponentNameEl.textContent = name;
      
      difficultyBadgeEl.textContent = difficulty.charAt(0).toUpperCase() + difficulty.slice(1);
      difficultyBadgeEl.className = `difficulty-badge difficulty-${difficulty}`;
    }

    function showAIStatus(message, type = 'thinking') {
      aiStatusEl.style.display = 'block';
      aiStatusEl.className = `ai-status ai-${type}`;
      
      if (type === 'thinking') {
        aiStatusEl.innerHTML = `🤖 <span class="thinking-dots">${message}</span>`;
      } else {
        aiStatusEl.innerHTML = `🎯 ${message}`;
      }
    }

    function hideAIStatus() {
      aiStatusEl.style.display = 'none';
    }

    function updateTimerDisplaysImmediately() {
      const playerIds = Object.keys(baseTimers);
      if (playerIds.length >= 2) {
        const p0 = baseTimers[playerIds[0]] ?? 60000;
        const p1 = baseTimers[playerIds[1]] ?? 60000;
        xTimerEl.textContent = formatTime(convertToMsIfNumber(p0));
        oTimerEl.textContent = formatTime(convertToMsIfNumber(p1));
      } else {
        xTimerEl.textContent = formatTime(60000);
        oTimerEl.textContent = formatTime(60000);
      }
    }

    function convertToMsIfNumber(v) {
      return typeof v === 'number' ? v : 60000;
    }

    function startLocalCountdown() {
      clearInterval(localTimerInterval);
      if (!currentTurnPlayerId || !turnStartTime || !baseTimers[currentTurnPlayerId]) return;

      const activePlayerId = currentTurnPlayerId;
      const tick = () => {
        const elapsed = Date.now() - turnStartTime;
        const remaining = Math.max(0, baseTimers[activePlayerId] - elapsed);

        const yourTimerEl = playerSymbol === 'X' ? xTimerEl : oTimerEl;
        const opponentTimerEl = playerSymbol === 'X' ? oTimerEl : xTimerEl;
        const yourTimerContainer = playerSymbol === 'X' ? xTimerContainer : oTimerContainer;
        const opponentTimerContainer = playerSymbol === 'X' ? oTimerContainer : xTimerContainer;

        if (currentTurn === playerSymbol) {
          // Your turn
          yourTimerEl.textContent = formatTime(remaining);
          yourTimerContainer.classList.add('active');
          yourTimerContainer.classList.toggle('warning', remaining < 10000);
          opponentTimerContainer.classList.remove('active', 'warning', 'ai-active');
        } else {
          // AI's turn
          opponentTimerEl.textContent = formatTime(remaining);
          opponentTimerContainer.classList.add('active', 'ai-active');
          opponentTimerContainer.classList.toggle('warning', remaining < 10000);
          yourTimerContainer.classList.remove('active', 'warning');
        }

        if (remaining <= 0) {
          clearInterval(localTimerInterval);
        }
      };

      tick();
      localTimerInterval = setInterval(tick, 100);
    }

    function stopLocalCountdown() {
      clearInterval(localTimerInterval);
      xTimerContainer.classList.remove('active', 'warning', 'ai-active');
      oTimerContainer.classList.remove('active', 'warning', 'ai-active');
    }

    function updateBoard(board) {
      [...boardEl.children].forEach((cell, idx) => {
        const value = board[idx];
        cell.textContent = value || "";
        cell.classList.toggle('taken', !!value);
        cell.style.color = value === 'X' ? '#007bff' : value === 'O' ? '#dc3545' : '#000';
      });
    }

    function updateTurnIndicator() {
      if (!gameActive) return;

      if (currentTurn === playerSymbol) {
        turnEl.textContent = "Your turn - Click a square!";
        turnEl.style.color = "#007bff";
        turnEl.style.fontWeight = "bold";
      } else if (currentTurn) {
        turnEl.textContent = `${opponentAIName}'s turn`;
        turnEl.style.color = "#28a745";
        turnEl.style.fontWeight = "normal";
      } else {
        turnEl.textContent = "Waiting for game to start...";
        turnEl.style.color = "#666";
        turnEl.style.fontWeight = "normal";
      }
    }

    function showNewGameButtons() {
      newAIGameButton.style.display = "inline-block";
      newGameButton.style.display = "inline-block";
    }

    // Socket handlers
    socket.on('connect', () => {
      console.log('Connected to AI game server');
      connectionStatusEl.textContent = 'Connected';
      connectionStatusEl.className = 'connection-status connected';
      gameStatusEl.textContent = "Connected! Joining AI game...";

      socket.emit('joinAIGame', { gameId, playerId });
    });

    socket.on('disconnect', () => {
      console.log('Disconnected from server');
      connectionStatusEl.textContent = 'Disconnected';
      connectionStatusEl.className = 'connection-status disconnected';
      gameStatusEl.textContent = 'Disconnected from server. Trying to reconnect...';
      stopLocalCountdown();
      hideAIStatus();
    });

    socket.on('matchFound', ({ gameId: matchedGameId, symbol, playerId: gamePlayerId, playerIndex: pIndex, opponentName, isRated }) => {
      if (matchedGameId === gameId) {
        playerSymbol = symbol;
        playerIndex = pIndex;
        
        symbolEl.textContent = `You are ${symbol}`;
        gameStatusEl.textContent = "AI game started!"; 
        gameActive = true;
        
        updateOpponentInfo(opponentName, difficulty);
        
        console.log('AI Match found! You are:', symbol, 'Player index:', playerIndex, 'vs AI:', opponentName);
      }
      
      if (playerSymbol === 'X') {
        document.getElementById('xLabel').textContent = 'You';
        document.getElementById('oLabel').textContent = opponentAIName;
      } else {
        document.getElementById('xLabel').textContent = opponentAIName;
        document.getElementById('oLabel').textContent = 'You';
      }
    });

    socket.on('boardUpdate', ({ board, turn, timers, currentPlayerTimer, turnStartTime: ts }) => {
      console.log('Board update received', { board, turn, timers, currentPlayerTimer, ts });

      updateBoard(board);
      currentTurn = turn;
      updateTurnIndicator();

      if (timers) {
        baseTimers = { ...timers };
      }

      if (ts) {
        turnStartTime = ts;
      } else {
        turnStartTime = null;
      }

      const playerIds = Object.keys(baseTimers);
      if (playerIds.length >= 2) {
        const pidForX = playerIds[0];
        const pidForO = playerIds[1];
        currentTurnPlayerId = (turn === 'X') ? pidForX : pidForO;
      } else {
        currentTurnPlayerId = null;
      }

      updateTimerDisplaysImmediately();
      stopLocalCountdown();
      if (currentTurnPlayerId && turnStartTime) {
        startLocalCountdown();
      }

      // Hide AI thinking status when board updates (AI has moved)
      if (turn === playerSymbol) {
        hideAIStatus();
      }
    });

    socket.on('aiThinking', ({ message }) => {
      console.log('AI is thinking:', message);
      showAIStatus(message, 'thinking');
    });

    socket.on('aiMoveComplete', ({ move, message }) => {
      console.log('AI move complete:', move, message);
      showAIStatus(message, 'complete');
      
      // Hide the message after a short delay
      setTimeout(() => {
        hideAIStatus();
      }, 2000);
    });

    socket.on('gameOver', ({ winner, reason }) => {
      console.log('AI Game over:', winner, reason);
      gameActive = false;
      stopLocalCountdown();
      hideAIStatus();

      xTimerContainer.classList.remove('active', 'warning', 'ai-active');
      oTimerContainer.classList.remove('active', 'warning', 'ai-active');

      let message = '';
      if (winner === 'draw') {
        message = "Practice draw against the AI! 🤝";
        gameStatusEl.style.color = "#6c757d";
      } else if (winner === playerSymbol) {
        message = `Practice victory! You beat the AI! 🎉 (${difficulty} difficulty)`;
        gameStatusEl.style.color = "#28a745";
      } else {
        message = `AI wins this practice round! 🤖 (${difficulty} difficulty)`;
        gameStatusEl.style.color = "#dc3545";
      }

      if (reason === 'timeout') {
        message += " (Time ran out)";
      }

      gameStatusEl.textContent = message;
      turnEl.textContent = "Game finished";
      
      showNewGameButtons();
    });

    socket.on('errorMessage', (msg) => {
      console.error('AI Game Error:', msg);
      gameStatusEl.textContent = `Error: ${msg}`;
      gameStatusEl.style.color = "#dc3545";
    });

    // Click handler for moves
    boardEl.addEventListener('click', (e) => {
      if (!gameActive || currentTurn !== playerSymbol) return;

      const cell = e.target;
      if (!cell.classList.contains('cell') || cell.classList.contains('taken')) return;

      const index = parseInt(cell.dataset.index);
      if (isNaN(index)) return;

      console.log('Making move at index:', index);
      socket.emit('makeAIMove', { gameId, index });

      // Provide immediate visual feedback
      cell.style.background = '#e9ecef';
      setTimeout(() => {
        if (!cell.classList.contains('taken')) {
          cell.style.background = 'white';
        }
      }, 200);
    });

    // Keyboard support
    document.addEventListener('keydown', (e) => {
      if (!gameActive || currentTurn !== playerSymbol) return;

      const key = e.key;
      let index = -1;

      if (key >= '1' && key <= '9') {
        index = parseInt(key) - 1;
      } else if (key >= '0' && key <= '8') {
        index = parseInt(key);
      }

      if (index >= 0 && index <= 8) {
        const cell = boardEl.children[index];
        if (cell && !cell.classList.contains('taken')) {
          cell.click();
        }
      }
    });

    // Cleanup on unload
    window.addEventListener('beforeunload', () => {
      stopLocalCountdown();
    });
  </script>
</body>
</html>