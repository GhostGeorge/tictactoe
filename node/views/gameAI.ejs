<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>AI Game - Tic Tac Toe</title>
    <link rel="stylesheet" href="/styles/index.css" />
    <style>
      body {
        font-family: Arial, sans-serif;
        background: #f8f9fa;
        margin: 0;
        padding: 0;
      }
      .container {
        max-width: 600px;
        margin: 30px auto;
        padding: 20px;
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      }
      .game-header {
        text-align: center;
        margin-bottom: 20px;
      }
      .connection-status.connected {
        color: #28a745;
      }
      .connection-status.disconnected {
        color: #dc3545;
      }
      .game-board {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 5px;
        margin: 20px 0;
      }
      .cell {
        width: 100px;
        height: 100px;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 2rem;
        cursor: pointer;
        background: #fff;
        border: 2px solid #dee2e6;
        transition: background 0.2s;
      }
      .cell.taken {
        cursor: not-allowed;
      }
      .cell:hover {
        background: #e9ecef;
      }
      .ai-status {
        margin: 10px 0;
        padding: 10px;
        border-radius: 8px;
        font-weight: bold;
        transition: all 0.3s ease;
        min-height: 24px;
      }
      .ai-thinking {
        background: #fff3cd;
        color: #856404;
        border: 1px solid #ffeaa7;
      }
      .ai-complete {
        background: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
      }
      .difficulty-badge {
        display: inline-block;
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 0.8rem;
        font-weight: bold;
        margin-left: 10px;
      }
      .difficulty-easy {
        background: #d4edda;
        color: #155724;
      }
      .difficulty-medium {
        background: #fff3cd;
        color: #856404;
      }
      .difficulty-hard {
        background: #f8d7da;
        color: #721c24;
      }
      .ai-active {
        background: #e7f3ff !important;
        border-color: #007bff !important;
      }
      .timer-section {
        display: flex;
        justify-content: space-around;
        margin: 20px 0;
      }
      .player-timer {
        text-align: center;
      }
      .active {
        font-weight: bold;
      }
      .warning {
        color: #dc3545;
      }
      .game-actions {
        display: flex;
        justify-content: center;
        gap: 15px;
        margin-top: 20px;
        flex-wrap: wrap;
      }
      .btn {
        padding: 12px 24px;
        font-size: 16px;
        border-radius: 8px;
        border: none;
        cursor: pointer;
        text-decoration: none;
        text-align: center;
        transition: all 0.3s ease;
        min-width: 140px;
      }
      .btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
      }
      .btn-primary {
        background: #007bff;
        color: white;
      }
      .btn-primary:hover {
        background: #0056b3;
      }
      .btn-success {
        background: #28a745;
        color: white;
      }
      .btn-success:hover {
        background: #1e7e34;
      }
      .btn-secondary {
        background: #6c757d;
        color: white;
      }
      .btn-secondary:hover {
        background: #545b62;
      }
      @media (max-width: 480px) {
        .cell {
          width: 80px;
          height: 80px;
          font-size: 1.5rem;
        }
        .btn {
          min-width: 140px;
          padding: 10px;
          font-size: 14px;
        }
      }
    </style>
  </head>
  <body>
    <script id="server-data" type="application/json">
      { "gameId": "<%= gameId %>", "playerId": "<%= playerId %>", "difficulty": "<%= difficulty %>", "aiName": "<%= aiName %>", "guest": <%= guest %> }
    </script>

    <div class="container">
      <div class="game-header">
        <h1>AI Game</h1>
        <div id="connectionStatus" class="connection-status">Connecting...</div>
      </div>

      <div class="game-info">
        <div id="playerSymbol">Waiting...</div>
        <div id="gameStatus">Connecting to AI game...</div>
        <div id="turnIndicator">Waiting for game to start...</div>
      </div>

      <div id="opponentInfo" style="display: none">
        Opponent: <span id="opponentName"></span>
        <span id="difficultyBadge" class="difficulty-badge"></span>
      </div>

      <div id="aiStatus" class="ai-status"></div>

      <div class="game-board" id="board">
        <div class="cell" data-index="0"></div>
        <div class="cell" data-index="1"></div>
        <div class="cell" data-index="2"></div>
        <div class="cell" data-index="3"></div>
        <div class="cell" data-index="4"></div>
        <div class="cell" data-index="5"></div>
        <div class="cell" data-index="6"></div>
        <div class="cell" data-index="7"></div>
        <div class="cell" data-index="8"></div>
      </div>

      <div class="timer-section">
        <div id="playerXTimer" class="player-timer">
          <div id="xLabel">X</div>
          <div id="xTimeRemaining">1:00</div>
        </div>
        <div id="playerOTimer" class="player-timer">
          <div id="oLabel">O</div>
          <div id="oTimeRemaining">1:00</div>
        </div>
      </div>

      <div class="game-actions">
        <button
          id="newAIGameButton"
          class="btn btn-primary"
          style="display: none"
          onclick="window.location.href='/play-ai'"
        >
          New AI Game
        </button>
        <button
          id="queueNewGameButton"
          class="btn btn-success"
          style="display: none"
          onclick="window.location.href='/queue'"
        >
          Queue New Game
        </button>
        <button
          id="newGameButton"
          class="btn btn-secondary"
          style="display: none"
          onclick="window.location.href='/home'"
        >
          Return Home
        </button>
      </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
      const socket = io();
      const serverData = JSON.parse(
        document.getElementById("server-data").textContent
      );
      const {
        gameId,
        playerId,
        difficulty,
        aiName,
        guest: isGuest,
      } = serverData;

      let playerSymbol = null;
      let currentTurn = null;
      let gameActive = true;
      let opponentAIName = aiName || "AI";

      let baseTimers = {};
      let turnStartTime = null;
      let currentTurnPlayerId = null;
      let localTimerInterval = null;
      let aiThinkingInterval = null; // for animated dots

      const boardEl = document.getElementById("board");
      const turnEl = document.getElementById("turnIndicator");
      const symbolEl = document.getElementById("playerSymbol");
      const gameStatusEl = document.getElementById("gameStatus");
      const connectionStatusEl = document.getElementById("connectionStatus");
      const opponentInfoEl = document.getElementById("opponentInfo");
      const opponentNameEl = document.getElementById("opponentName");
      const difficultyBadgeEl = document.getElementById("difficultyBadge");
      const aiStatusEl = document.getElementById("aiStatus");
      const xTimerEl = document.getElementById("xTimeRemaining");
      const oTimerEl = document.getElementById("oTimeRemaining");
      const xTimerContainer = document.getElementById("playerXTimer");
      const oTimerContainer = document.getElementById("playerOTimer");
      const newAIGameButton = document.getElementById("newAIGameButton");
      const queueNewGameButton = document.getElementById("queueNewGameButton");
      const newGameButton = document.getElementById("newGameButton");

      function formatTime(ms) {
        const s = Math.ceil(ms / 1000);
        return `${Math.floor(s / 60)}:${(s % 60).toString().padStart(2, "0")}`;
      }

      function showAIStatus(msg, type = "thinking") {
        aiStatusEl.style.display = "block";
        aiStatusEl.className = `ai-status ai-${type}`;
        if (type === "thinking") {
          let dots = 0;
          aiStatusEl.textContent = `ðŸ¤– ${msg}`;
          clearInterval(aiThinkingInterval);
          aiThinkingInterval = setInterval(() => {
            dots = (dots + 1) % 4;
            aiStatusEl.textContent = `ðŸ¤– ${msg}${".".repeat(dots)}`;
          }, 500);
        } else {
          clearInterval(aiThinkingInterval);
          aiStatusEl.textContent = `ðŸŽ¯ ${msg}`;
          setTimeout(() => {
            aiStatusEl.style.display = "none";
          }, 2000);
        }
      }

      function hideAIStatus() {
        aiStatusEl.style.display = "none";
        clearInterval(aiThinkingInterval);
      }

      function updateBoard(board) {
        [...boardEl.children].forEach((cell, i) => {
          cell.textContent = board[i] || "";
          cell.classList.toggle("taken", !!board[i]);
          cell.style.color =
            board[i] === "X"
              ? "#007bff"
              : board[i] === "O"
              ? "#dc3545"
              : "#000";
        });
      }

      function updateTurnIndicator() {
        if (!gameActive) return;
        if (currentTurn === playerSymbol) {
          turnEl.textContent = "Your turn - Click a square!";
          turnEl.style.color = "#007bff";
        } else if (currentTurn) {
          turnEl.textContent = `${opponentAIName}'s turn`;
          turnEl.style.color = "#28a745";
        } else {
          turnEl.textContent = "Waiting for game to start...";
          turnEl.style.color = "#666";
        }
      }

      function updateTimers() {
        const ids = Object.keys(baseTimers);
        if (ids.length >= 2) {
          const pidX = ids[0],
            pidO = ids[1];
          currentTurnPlayerId = currentTurn === "X" ? pidX : pidO;
          xTimerEl.textContent = formatTime(baseTimers[pidX] ?? 60000);
          oTimerEl.textContent = formatTime(baseTimers[pidO] ?? 60000);
        } else {
          xTimerEl.textContent = oTimerEl.textContent = "1:00";
        }
      }

      function startCountdown() {
        clearInterval(localTimerInterval);
        if (
          !currentTurnPlayerId ||
          !turnStartTime ||
          !baseTimers[currentTurnPlayerId]
        )
          return;
        const activeId = currentTurnPlayerId;
        const tick = () => {
          const elapsed = Date.now() - turnStartTime;
          const remaining = Math.max(0, baseTimers[activeId] - elapsed);
          if (currentTurn === playerSymbol) {
            xTimerEl.textContent = formatTime(remaining);
            xTimerContainer.classList.add("active");
            oTimerContainer.classList.remove("active", "ai-active");
          } else {
            oTimerEl.textContent = formatTime(remaining);
            oTimerContainer.classList.add("active", "ai-active");
            xTimerContainer.classList.remove("active");
          }
          if (remaining <= 0) clearInterval(localTimerInterval);
        };
        tick();
        localTimerInterval = setInterval(tick, 100);
      }

      function stopCountdown() {
        clearInterval(localTimerInterval);
        xTimerContainer.classList.remove("active", "ai-active");
        oTimerContainer.classList.remove("active", "ai-active");
      }

      socket.on("connect", () => {
        connectionStatusEl.textContent = "Connected";
        gameStatusEl.textContent = "Connected! Joining AI game...";
        socket.emit("joinAIGame", { gameId, playerId });
      });
      socket.on("disconnect", () => {
        connectionStatusEl.textContent = "Disconnected";
        gameStatusEl.textContent = "Disconnected from server";
        stopCountdown();
        hideAIStatus();
      });

      socket.on("matchFound", ({ symbol, opponentName }) => {
        playerSymbol = symbol;
        symbolEl.textContent = `You are ${symbol}`;
        gameStatusEl.textContent = "AI game started!";
        opponentInfoEl.style.display = "block";
        opponentNameEl.textContent = opponentName;
        difficultyBadgeEl.textContent =
          difficulty.charAt(0).toUpperCase() + difficulty.slice(1);
        difficultyBadgeEl.className = `difficulty-badge difficulty-${difficulty}`;
      });

      socket.on("boardUpdate", ({ board, turn, timers, turnStartTime: ts }) => {
        updateBoard(board);
        currentTurn = turn;
        if (timers) baseTimers = { ...timers };
        if (ts) turnStartTime = ts;
        updateTimers();
        stopCountdown();
        startCountdown();
        updateTurnIndicator();
        if (currentTurn === playerSymbol) hideAIStatus();
      });

      socket.on("aiThinking", ({ message }) => {
        showAIStatus(message, "thinking");
      });
      socket.on("aiMoveComplete", ({ message }) => {
        showAIStatus(message, "complete");
      });

      socket.on("gameOver", ({ winner, reason }) => {
        gameActive = false;
        stopCountdown();
        hideAIStatus();
        let msg = "";
        if (winner === "draw") msg = "Draw!";
        else if (winner === playerSymbol) msg = `You win! (${difficulty})`;
        else msg = `AI wins! (${difficulty})`;
        if (reason === "timeout") msg += " (Time ran out)";
        gameStatusEl.textContent = msg;
        turnEl.textContent = "Game finished";
        newAIGameButton.style.display = "inline-block";
        queueNewGameButton.style.display = "inline-block";
        newGameButton.style.display = "inline-block";
      });

      boardEl.addEventListener("click", (e) => {
        if (!gameActive || currentTurn !== playerSymbol) return;
        const cell = e.target;
        if (
          !cell.classList.contains("cell") ||
          cell.classList.contains("taken")
        )
          return;
        const index = parseInt(cell.dataset.index);
        socket.emit("makeAIMove", { gameId, index });
      });

      window.addEventListener("beforeunload", () => {
        stopCountdown();
        hideAIStatus();
      });
    </script>
  </body>
</html>
