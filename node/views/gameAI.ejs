<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>AI Game - Tic Tac Toe</title>
  <link rel="stylesheet" href="/styles/index.css">
  <style>
    .ai-status {
      display: none;
      margin: 10px 0;
      padding: 10px;
      border-radius: 5px;
      font-weight: bold;
    }
    
    .ai-thinking {
      background: #fff3cd;
      color: #856404;
      border: 1px solid #ffeaa7;
    }
    
    .ai-complete {
      background: #d4edda;
      color: #155724;
      border: 1px solid #c3e6cb;
    }
    
    .difficulty-badge {
      display: inline-block;
      padding: 4px 8px;
      border-radius: 12px;
      font-size: 0.8rem;
      font-weight: bold;
      margin-left: 10px;
    }
    
    .difficulty-easy {
      background: #d4edda;
      color: #155724;
    }
    
    .difficulty-medium {
      background: #fff3cd;
      color: #856404;
    }
    
    .difficulty-hard {
      background: #f8d7da;
      color: #721c24;
    }
    
    .ai-active {
      background: #e7f3ff !important;
      border-color: #007bff !important;
    }
  </style>
</head>
<body>
  <!-- Server data for JavaScript -->
  <script id="server-data" type="application/json">
    {
      "gameId": "<%= gameId %>",
      "playerId": "<%= playerId %>",
      "difficulty": "<%= difficulty %>",
      "aiName": "<%= aiName %>",
      "guest": <%= guest %>
    }
  </script>

  <div class="container">
    <div class="game-header">
      <h1>AI Game</h1>
      <div id="connectionStatus" class="connection-status">Connecting...</div>
    </div>

    <div class="game-info">
      <div id="playerSymbol" class="player-symbol">Waiting...</div>
      <div id="gameStatus" class="game-status">Connecting to AI game...</div>
      <div id="turnIndicator" class="turn-indicator">Waiting for game to start...</div>
    </div>

    <div id="opponentInfo" class="opponent-info" style="display: none;">
      <span id="opponentName"></span>
      <span id="difficultyBadge" class="difficulty-badge"></span>
    </div>

    <div id="aiStatus" class="ai-status"></div>

    <div class="game-board">
      <div id="board" class="board">
        <div class="cell" data-index="0"></div>
        <div class="cell" data-index="1"></div>
        <div class="cell" data-index="2"></div>
        <div class="cell" data-index="3"></div>
        <div class="cell" data-index="4"></div>
        <div class="cell" data-index="5"></div>
        <div class="cell" data-index="6"></div>
        <div class="cell" data-index="7"></div>
        <div class="cell" data-index="8"></div>
      </div>
    </div>

    <div class="timer-section">
      <div class="timer-container">
        <div id="playerXTimer" class="player-timer">
          <div class="timer-label">
            <span id="xLabel">X</span>
          </div>
          <div id="xTimeRemaining" class="time-remaining">1:00</div>
        </div>
        <div id="playerOTimer" class="player-timer">
          <div class="timer-label">
            <span id="oLabel">O</span>
          </div>
          <div id="oTimeRemaining" class="time-remaining">1:00</div>
        </div>
      </div>
    </div>

    <div class="game-actions" style="display: none;">
      <button id="newAIGameButton" class="btn btn-primary" onclick="window.location.href='/play-ai'">New AI Game</button>
      <button id="newGameButton" class="btn btn-secondary" onclick="window.location.href='/home'">Back to Home</button>
    </div>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    // Initialize socket connection
    const socket = io();

    // Parse server data
    const serverData = JSON.parse(document.getElementById('server-data').textContent);
    const { gameId, playerId, difficulty, aiName, guest: isGuest } = serverData;

    // Game state - single declaration only
    let playerSymbol = null;
    let playerIndex = null;
    let currentTurn = null;
    let gameActive = true;
    let opponentAIName = aiName || 'AI';

    // Timer state - consolidated timer management
    let baseTimers = {};
    let turnStartTime = null;
    let currentTurnPlayerId = null;
    let localTimerInterval = null;

    // DOM elements
    const boardEl = document.getElementById("board");
    const turnEl = document.getElementById("turnIndicator");
    const symbolEl = document.getElementById("playerSymbol");
    const gameStatusEl = document.getElementById("gameStatus");
    const connectionStatusEl = document.getElementById("connectionStatus");
    const opponentInfoEl = document.getElementById("opponentInfo");
    const opponentNameEl = document.getElementById("opponentName");
    const difficultyBadgeEl = document.getElementById("difficultyBadge");
    const aiStatusEl = document.getElementById("aiStatus");
    const xTimerEl = document.getElementById("xTimeRemaining");
    const oTimerEl = document.getElementById("oTimeRemaining");
    const xTimerContainer = document.getElementById("playerXTimer");
    const oTimerContainer = document.getElementById("playerOTimer");
    const newAIGameButton = document.getElementById("newAIGameButton");
    const newGameButton = document.getElementById("newGameButton");

    console.log('AI Game page loaded. GameID:', gameId, 'PlayerID:', playerId, 'Difficulty:', difficulty);

    // Utility functions
    function formatTime(ms) {
      ms = Math.max(0, Math.floor(ms));
      const totalSeconds = Math.ceil(ms / 1000);
      const mins = Math.floor(totalSeconds / 60);
      const secs = totalSeconds % 60;
      return `${mins}:${secs.toString().padStart(2, '0')}`;
    }

    function updateOpponentInfo(name, difficulty) {
      opponentInfoEl.style.display = 'block';
      opponentNameEl.textContent = name;
      
      difficultyBadgeEl.textContent = difficulty.charAt(0).toUpperCase() + difficulty.slice(1);
      difficultyBadgeEl.className = `difficulty-badge difficulty-${difficulty}`;
    }

    function showAIStatus(message, type = 'thinking') {
      aiStatusEl.style.display = 'block';
      aiStatusEl.className = `ai-status ai-${type}`;
      
      if (type === 'thinking') {
        aiStatusEl.innerHTML = `🤖 ${message}`;
      } else {
        aiStatusEl.innerHTML = `🎯 ${message}`;
      }
    }

    function hideAIStatus() {
      aiStatusEl.style.display = 'none';
    }

    function updateTimerDisplaysImmediately() {
      const playerIds = Object.keys(baseTimers);
      if (playerIds.length >= 2) {
        const p0 = baseTimers[playerIds[0]] ?? 60000;
        const p1 = baseTimers[playerIds[1]] ?? 60000;
        xTimerEl.textContent = formatTime(convertToMsIfNumber(p0));
        oTimerEl.textContent = formatTime(convertToMsIfNumber(p1));
      } else {
        xTimerEl.textContent = formatTime(60000);
        oTimerEl.textContent = formatTime(60000);
      }
    }

    function convertToMsIfNumber(v) {
      return typeof v === 'number' ? v : 60000;
    }

    function startLocalCountdown() {
      clearInterval(localTimerInterval);
      if (!currentTurnPlayerId || !turnStartTime || !baseTimers[currentTurnPlayerId]) return;

      const activePlayerId = currentTurnPlayerId;
      const tick = () => {
        const elapsed = Date.now() - turnStartTime;
        const remaining = Math.max(0, baseTimers[activePlayerId] - elapsed);

        const yourTimerEl = playerSymbol === 'X' ? xTimerEl : oTimerEl;
        const opponentTimerEl = playerSymbol === 'X' ? oTimerEl : xTimerEl;
        const yourTimerContainer = playerSymbol === 'X' ? xTimerContainer : oTimerContainer;
        const opponentTimerContainer = playerSymbol === 'X' ? oTimerContainer : xTimerContainer;

        if (currentTurn === playerSymbol) {
          // Your turn
          yourTimerEl.textContent = formatTime(remaining);
          yourTimerContainer.classList.add('active');
          yourTimerContainer.classList.toggle('warning', remaining < 10000);
          opponentTimerContainer.classList.remove('active', 'warning', 'ai-active');
        } else {
          // AI's turn
          opponentTimerEl.textContent = formatTime(remaining);
          opponentTimerContainer.classList.add('active', 'ai-active');
          opponentTimerContainer.classList.toggle('warning', remaining < 10000);
          yourTimerContainer.classList.remove('active', 'warning');
        }

        if (remaining <= 0) {
          clearInterval(localTimerInterval);
        }
      };

      tick();
      localTimerInterval = setInterval(tick, 100);
    }

    function stopLocalCountdown() {
      clearInterval(localTimerInterval);
      xTimerContainer.classList.remove('active', 'warning', 'ai-active');
      oTimerContainer.classList.remove('active', 'warning', 'ai-active');
    }

    function updateBoard(board) {
      [...boardEl.children].forEach((cell, idx) => {
        const value = board[idx];
        cell.textContent = value || "";
        cell.classList.toggle('taken', !!value);
        cell.style.color = value === 'X' ? '#007bff' : value === 'O' ? '#dc3545' : '#000';
      });
    }

    function updateTurnIndicator() {
      if (!gameActive) return;

      if (currentTurn === playerSymbol) {
        turnEl.textContent = "Your turn - Click a square!";
        turnEl.style.color = "#007bff";
        turnEl.style.fontWeight = "bold";
      } else if (currentTurn) {
        turnEl.textContent = `${opponentAIName}'s turn`;
        turnEl.style.color = "#28a745";
        turnEl.style.fontWeight = "normal";
      } else {
        turnEl.textContent = "Waiting for game to start...";
        turnEl.style.color = "#666";
        turnEl.style.fontWeight = "normal";
      }
    }

    function showNewGameButtons() {
      newAIGameButton.style.display = "inline-block";
      newGameButton.style.display = "inline-block";
    }

    // Socket handlers
    socket.on('connect', () => {
      console.log('Connected to AI game server');
      connectionStatusEl.textContent = 'Connected';
      connectionStatusEl.className = 'connection-status connected';
      gameStatusEl.textContent = "Connected! Joining AI game...";

      socket.emit('joinAIGame', { gameId, playerId });
    });

    socket.on('disconnect', () => {
      console.log('Disconnected from server');
      connectionStatusEl.textContent = 'Disconnected';
      connectionStatusEl.className = 'connection-status disconnected';
      gameStatusEl.textContent = 'Disconnected from server. Trying to reconnect...';
      stopLocalCountdown();
      hideAIStatus();
    });

    socket.on('matchFound', ({ gameId: matchedGameId, symbol, playerId: gamePlayerId, playerIndex: pIndex, opponentName, isRated }) => {
      if (matchedGameId === gameId) {
        playerSymbol = symbol;
        playerIndex = pIndex;
        
        symbolEl.textContent = `You are ${symbol}`;
        gameStatusEl.textContent = "AI game started!"; 
        gameActive = true;
        
        updateOpponentInfo(opponentName, difficulty);
        
        console.log('AI Match found! You are:', symbol, 'Player index:', playerIndex, 'vs AI:', opponentName);
      }
      
      // Update timer labels
      if (playerSymbol === 'X') {
        document.getElementById('xLabel').textContent = 'You';
        document.getElementById('oLabel').textContent = opponentAIName;
      } else {
        document.getElementById('xLabel').textContent = opponentAIName;
        document.getElementById('oLabel').textContent = 'You';
      }
    });

    socket.on('boardUpdate', ({ board, turn, timers, currentPlayerTimer, turnStartTime: ts }) => {
      console.log('Board update received', { board, turn, timers, currentPlayerTimer, ts });

      updateBoard(board);
      currentTurn = turn;
      updateTurnIndicator();

      if (timers) {
        baseTimers = { ...timers };
      }

      if (ts) {
        turnStartTime = ts;
      } else {
        turnStartTime = null;
      }

      const playerIds = Object.keys(baseTimers);
      if (playerIds.length >= 2) {
        const pidForX = playerIds[0];
        const pidForO = playerIds[1];
        currentTurnPlayerId = (turn === 'X') ? pidForX : pidForO;
      } else {
        currentTurnPlayerId = null;
      }

      updateTimerDisplaysImmediately();
      stopLocalCountdown();
      if (currentTurnPlayerId && turnStartTime) {
        startLocalCountdown();
      }

      // Hide AI thinking status when board updates (AI has moved)
      if (turn === playerSymbol) {
        hideAIStatus();
      }
    });

    socket.on('aiThinking', ({ message }) => {
      console.log('AI is thinking:', message);
      showAIStatus(message, 'thinking');
    });

    socket.on('aiMoveComplete', ({ move, message }) => {
      console.log('AI move complete:', move, message);
      showAIStatus(message, 'complete');
      
      // Hide the message after a short delay
      setTimeout(() => {
        hideAIStatus();
      }, 2000);
    });

    socket.on('gameOver', ({ winner, reason }) => {
      console.log('AI Game over:', winner, reason);
      gameActive = false;
      stopLocalCountdown();
      hideAIStatus();

      xTimerContainer.classList.remove('active', 'warning', 'ai-active');
      oTimerContainer.classList.remove('active', 'warning', 'ai-active');

      let message = '';
      if (winner === 'draw') {
        message = "Practice draw against the AI! 🤝";
        gameStatusEl.style.color = "#6c757d";
      } else if (winner === playerSymbol) {
        message = `Practice victory! You beat the AI! 🎉 (${difficulty} difficulty)`;
        gameStatusEl.style.color = "#28a745";
      } else {
        message = `AI wins this practice round! 🤖 (${difficulty} difficulty)`;
        gameStatusEl.style.color = "#dc3545";
      }

      if (reason === 'timeout') {
        message += " (Time ran out)";
      }

      gameStatusEl.textContent = message;
      turnEl.textContent = "Game finished";
      
      showNewGameButtons();
    });

    socket.on('errorMessage', (msg) => {
      console.error('AI Game Error:', msg);
      gameStatusEl.textContent = `Error: ${msg}`;
      gameStatusEl.style.color = "#dc3545";
    });

    // Click handler for moves
    boardEl.addEventListener('click', (e) => {
      if (!gameActive || currentTurn !== playerSymbol) return;

      const cell = e.target;
      if (!cell.classList.contains('cell') || cell.classList.contains('taken')) return;

      const index = parseInt(cell.dataset.index);
      if (isNaN(index)) return;

      console.log('Making move at index:', index);
      socket.emit('makeAIMove', { gameId, index });

      // Provide immediate visual feedback
      cell.style.background = '#e9ecef';
      setTimeout(() => {
        if (!cell.classList.contains('taken')) {
          cell.style.background = 'white';
        }
      }, 200);
    });

    // Keyboard support
    document.addEventListener('keydown', (e) => {
      if (!gameActive || currentTurn !== playerSymbol) return;

      const key = e.key;
      let index = -1;

      if (key >= '1' && key <= '9') {
        index = parseInt(key) - 1;
      } else if (key >= '0' && key <= '8') {
        index = parseInt(key);
      }

      if (index >= 0 && index <= 8) {
        const cell = boardEl.children[index];
        if (cell && !cell.classList.contains('taken')) {
          cell.click();
        }
      }
    });

    // Cleanup on unload
    window.addEventListener('beforeunload', () => {
      stopLocalCountdown();
    });
  </script>
</body>
</html>
