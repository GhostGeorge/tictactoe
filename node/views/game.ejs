<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Tic Tac Toe Game</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      text-align: center;
      padding: 20px;
      background-color: #f5f5f5;
    }
    
    #board {
      display: grid;
      grid-template-columns: repeat(3, 100px);
      grid-gap: 2px;
      margin: 20px auto;
      width: 304px;
      background: #333;
      border-radius: 8px;
      padding: 2px;
    }
    
    .cell {
      width: 100px;
      height: 100px;
      background: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 2rem;
      font-weight: bold;
      cursor: pointer;
      user-select: none;
      border-radius: 4px;
      transition: background-color 0.2s;
    }
    
    .cell:hover:not(.taken) {
      background: #f0f0f0;
    }
    
    .cell.taken {
      cursor: not-allowed;
      background: #f8f9fa;
    }
    
    .cell.winning {
      background: #d4edda !important;
      color: #155724;
    }
    
    #gameStatus {
      font-size: 1.5rem;
      margin: 20px 0;
      font-weight: bold;
      min-height: 2rem;
    }
    
    #playerSymbol {
      font-size: 1.2rem;
      margin: 10px 0;
      background: #e9ecef;
      padding: 10px;
      border-radius: 5px;
      display: inline-block;
    }
    
    #turnIndicator {
      font-size: 1.1rem;
      margin: 10px 0;
      color: #666;
    }

    .timer-container {
      display: flex;
      justify-content: space-around;
      margin: 20px 0;
      font-size: 1rem;
      max-width: 400px;
      margin-left: auto;
      margin-right: auto;
    }

    .timer {
      padding: 15px;
      border: 2px solid #ccc;
      border-radius: 8px;
      min-width: 120px;
      background: white;
      transition: all 0.3s ease;
    }

    .timer.active {
      border-color: #007bff;
      background-color: #e7f3ff;
      transform: scale(1.05);
    }

    .timer.warning {
      border-color: #dc3545;
      background-color: #f8d7da;
      color: #721c24;
      animation: pulse 1s infinite;
    }

    @keyframes pulse {
      0% { transform: scale(1); }
      50% { transform: scale(1.02); }
      100% { transform: scale(1); }
    }

    .timer-label {
      font-weight: bold;
      margin-bottom: 5px;
    }

    .timer-value {
      font-size: 1.2rem;
      font-family: monospace;
    }

    .connection-status {
      position: fixed;
      top: 10px;
      right: 10px;
      padding: 5px 10px;
      border-radius: 15px;
      font-size: 0.8rem;
      font-weight: bold;
    }

    .connected {
      background: #d4edda;
      color: #155724;
    }

    .disconnected {
      background: #f8d7da;
      color: #721c24;
    }

    .game-info {
      background: white;
      padding: 20px;
      border-radius: 8px;
      margin: 20px auto;
      max-width: 500px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .opponent-status {
      margin: 10px 0;
      padding: 8px;
      border-radius: 4px;
      font-size: 0.9rem;
    }

    .opponent-connected {
      background: #d4edda;
      color: #155724;
    }

    .opponent-disconnected {
      background: #f8d7da;
      color: #721c24;
    }

    button {
      background: #007bff;
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 5px;
      cursor: pointer;
      font-size: 1rem;
      margin: 5px;
      transition: background-color 0.2s;
    }

    button:hover {
      background: #0056b3;
    }

    button:disabled {
      background: #6c757d;
      cursor: not-allowed;
    }

    button.queue-button {
      background: #28a745;
      font-weight: bold;
    }

    button.queue-button:hover {
      background: #218838;
    }

    .button-container {
      margin-top: 20px;
    }
  </style>
</head>
<body>
  <div class="connection-status" id="connectionStatus">Connecting...</div>
  
  <h1>Tic Tac Toe</h1>
  
  <div class="game-info">
    <div id="gameStatus">Connecting to game...</div>
    <div id="playerSymbol">Waiting for symbol assignment...</div>
    <div id="turnIndicator">Waiting for game to start...</div>
    <div id="opponentStatus" class="opponent-status" style="display: none;"></div>
  </div>
  
  <div class="timer-container">
    <div class="timer" id="playerXTimer">
      <div class="timer-label" id="xLabel">Player X</div>
      <div class="timer-value" id="xTimeRemaining">1:00</div>
    </div>
    <div class="timer" id="playerOTimer">
      <div class="timer-label" id="oLabel">Player O</div>
      <div class="timer-value" id="oTimeRemaining">1:00</div>
    </div>
  </div>
  
  <div id="board">
    <div class="cell" data-index="0"></div>
    <div class="cell" data-index="1"></div>
    <div class="cell" data-index="2"></div>
    <div class="cell" data-index="3"></div>
    <div class="cell" data-index="4"></div>
    <div class="cell" data-index="5"></div>
    <div class="cell" data-index="6"></div>
    <div class="cell" data-index="7"></div>
    <div class="cell" data-index="8"></div>
  </div>

  <div class="button-container">
    <button onclick="window.location.href='/home'">Return Home</button>
    <button id="newGameButton" class="queue-button" style="display: none;" onclick="window.location.href='/queue'">Queue New Game</button>
  </div>

  <script id="server-data" type="application/json">
    <%- JSON.stringify({ gameId, playerId, guest }) %>
  </script>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();

    // Parse server data
    const serverData = JSON.parse(document.getElementById('server-data').textContent);
    const { gameId, playerId, guest: isGuest } = serverData;

    // Game state
    let playerSymbol = null;
    let playerIndex = null;
    let currentTurn = null;
    let gameActive = true;
    let timerInterval = null;
    let opponentConnected = true;

    // Timer state (server authoritative base timers keyed by playerId)
    let baseTimers = {};          // { playerId1: msRemaining, playerId2: msRemaining }
    let turnStartTime = null;     // server timestamp when current turn started (ms)
    let currentTurnPlayerId = null; // server playerId whose turn it is

    // local interval for smooth countdown
    let localTimerInterval = null;

    // DOM elements
    const boardEl = document.getElementById("board");
    const turnEl = document.getElementById("turnIndicator");
    const symbolEl = document.getElementById("playerSymbol");
    const gameStatusEl = document.getElementById("gameStatus");
    const connectionStatusEl = document.getElementById("connectionStatus");
    const opponentStatusEl = document.getElementById("opponentStatus");
    const xTimerEl = document.getElementById("xTimeRemaining");
    const oTimerEl = document.getElementById("oTimeRemaining");
    const xTimerContainer = document.getElementById("playerXTimer");
    const oTimerContainer = document.getElementById("playerOTimer");
    const newGameButton = document.getElementById("newGameButton");

    console.log('Game page loaded. GameID:', gameId, 'PlayerID:', playerId, 'Guest:', isGuest);
// ---------- utils ----------
    function formatTime(ms) {
      ms = Math.max(0, Math.floor(ms));
      const totalSeconds = Math.ceil(ms / 1000);
      const mins = Math.floor(totalSeconds / 60);
      const secs = totalSeconds % 60;
      return `${mins}:${secs.toString().padStart(2, '0')}`;
    }

    function updateTimerDisplaysImmediately() {
      // We render base timers for both players (these are server stored values)
      const playerIds = Object.keys(baseTimers);
      if (playerIds.length >= 2) {
        const p0 = baseTimers[playerIds[0]] ?? 60000;
        const p1 = baseTimers[playerIds[1]] ?? 60000;
        // Show the stored base values — the active player's display will be overwritten by the local countdown
        xTimerEl.textContent = formatTime(convertToMsIfNumber(p0));
        oTimerEl.textContent = formatTime(convertToMsIfNumber(p1));
      } else {
        // fallback
        xTimerEl.textContent = formatTime(60000);
        oTimerEl.textContent = formatTime(60000);
      }
    }

    function convertToMsIfNumber(v) {
      // server sends numbers in ms already; keep compat
      return typeof v === 'number' ? v : 60000;
    }

    // Start local countdown for active player, using baseTimers + turnStartTime (server values)
    function startLocalCountdown() {
      clearInterval(localTimerInterval);
      if (!currentTurnPlayerId || !turnStartTime || !baseTimers[currentTurnPlayerId]) return;

      const activePlayerId = currentTurnPlayerId;
      const tick = () => {
        const elapsed = Date.now() - turnStartTime;
        const remaining = Math.max(0, baseTimers[activePlayerId] - elapsed);

        // Update UI for active player
        // determine which timer element is "You" and which is "Opponent"
        const yourTimerEl = playerSymbol === 'X' ? xTimerEl : oTimerEl;
        const opponentTimerEl = playerSymbol === 'X' ? oTimerEl : xTimerEl;
        const yourTimerContainer = playerSymbol === 'X' ? xTimerContainer : oTimerContainer;
        const opponentTimerContainer = playerSymbol === 'X' ? oTimerContainer : xTimerContainer;

        // update timer displays
        if (currentTurn === playerSymbol) {
          // Your turn
          yourTimerEl.textContent = formatTime(remaining);
          yourTimerContainer.classList.add('active');
          yourTimerContainer.classList.toggle('warning', remaining < 10000);
          opponentTimerContainer.classList.remove('active', 'warning');
        } else {
          // Opponent's turn
          opponentTimerEl.textContent = formatTime(remaining);
          opponentTimerContainer.classList.add('active');
          opponentTimerContainer.classList.toggle('warning', remaining < 10000);
          yourTimerContainer.classList.remove('active', 'warning');
        }

        // If time ran out locally, stop ticking (server will detect and send gameOver)
        if (remaining <= 0) {
          clearInterval(localTimerInterval);
        }
      };

      // run immediately and then every 100ms for smoothness
      tick();
      localTimerInterval = setInterval(tick, 100);
    }

    function stopLocalCountdown() {
      clearInterval(localTimerInterval);
      xTimerContainer.classList.remove('active', 'warning');
      oTimerContainer.classList.remove('active', 'warning');
    }

    function isSymbolXForPlayer(pid) {
      // find which symbol this playerId maps to using the board players order if available
      // We'll infer from baseTimers keys order: first key -> X, second -> O in server sends
      const keys = Object.keys(baseTimers);
      if (keys.length < 2) return null;
      return keys[0] === pid;
    }

    // Update board visuals (cells)
    function updateBoard(board) {
      [...boardEl.children].forEach((cell, idx) => {
        const value = board[idx];
        cell.textContent = value || "";
        cell.classList.toggle('taken', !!value);
        cell.style.color = value === 'X' ? '#007bff' : value === 'O' ? '#dc3545' : '#000';
      });
    }

    // Update turn indicator text
    function updateTurnIndicator() {
      if (!gameActive) return;

      if (currentTurn === playerSymbol) {
        turnEl.textContent = "Your turn";
        turnEl.style.color = "#007bff";
        turnEl.style.fontWeight = "bold";
      } else if (currentTurn) {
        turnEl.textContent = opponentConnected ? "Opponent's turn" : "Waiting for opponent...";
        turnEl.style.color = "#666";
        turnEl.style.fontWeight = "normal";
      } else {
        turnEl.textContent = "Waiting for game to start...";
        turnEl.style.color = "#666";
        turnEl.style.fontWeight = "normal";
      }
    }

    function showNewGameButton() {
      newGameButton.style.display = "inline-block";
    }

    // ---------- socket handlers ----------
    socket.on('connect', () => {
      console.log('Connected to server');
      connectionStatusEl.textContent = 'Connected';
      connectionStatusEl.className = 'connection-status connected';
      gameStatusEl.textContent = "Connected! Joining game...";

      socket.emit('joinGame', { gameId, playerId });
    });

    socket.on('disconnect', () => {
      console.log('Disconnected from server');
      connectionStatusEl.textContent = 'Disconnected';
      connectionStatusEl.className = 'connection-status disconnected';
      gameStatusEl.textContent = 'Disconnected from server. Trying to reconnect...';
      stopLocalCountdown();
    });

    socket.on('matchFound', ({ gameId: matchedGameId, symbol, playerId: gamePlayerId, playerIndex: pIndex }) => {
      if (matchedGameId === gameId) {
        playerSymbol = symbol;
        playerIndex = pIndex;
        symbolEl.textContent = `You are ${symbol}`;
        gameStatusEl.textContent = "Game started!";
        gameActive = true;
        console.log('Match found! You are:', symbol, 'Player index:', playerIndex);
      }
      if (playerSymbol === 'X') {
        document.getElementById('xLabel').textContent = 'You';
        document.getElementById('oLabel').textContent = 'Opponent';
      } else {
        document.getElementById('xLabel').textContent = 'Opponent';
        document.getElementById('oLabel').textContent = 'You';
      }
    });

    // MAIN SYNC: server sends authoritative board + base timers + current turn details
    socket.on('boardUpdate', ({ board, turn, timers, currentPlayerTimer, turnStartTime: ts }) => {
      // timers is base stored times keyed by playerId (ms)
      console.log('Board update received', { board, turn, timers, currentPlayerTimer, ts });

      updateBoard(board);

      // update turn symbol and playerId mapping
      currentTurn = turn; // 'X' or 'O'
      updateTurnIndicator();

      // adopt server timers
      if (timers) {
        baseTimers = { ...timers }; // shallow copy
      }

      // adopt server turnStartTime and figure currentTurnPlayerId
      if (ts) {
        // server provides a numeric timestamp (ms)
        turnStartTime = ts;
      } else {
        turnStartTime = null;
      }

      // find playerId for the current turn symbol:
      // mapping: server sends timers as { [player0Id]: ms, [player1Id]: ms }
      // convertPlayerIdToSymbol on server used player index 0 -> 'X', 1 -> 'O'
      // so derive playerId:
      const playerIds = Object.keys(baseTimers);
      if (playerIds.length >= 2) {
        const symbolAtIndex0 = 'X'; // server uses index 0 -> X
        const pidForX = playerIds[0];
        const pidForO = playerIds[1];
        currentTurnPlayerId = (turn === 'X') ? pidForX : pidForO;
      } else {
        currentTurnPlayerId = null;
      }

      // update static timer displays and start local countdown for active player
      updateTimerDisplaysImmediately();
      stopLocalCountdown();
      if (currentTurnPlayerId && turnStartTime) {
        startLocalCountdown();
      }
    });

    // game over
    socket.on('gameOver', ({ winner, reason }) => {
      console.log('Game over:', winner, reason);
      gameActive = false;
      stopLocalCountdown();

      xTimerContainer.classList.remove('active', 'warning');
      oTimerContainer.classList.remove('active', 'warning');

      let message = '';
      if (winner === 'draw') {
        message = "It's a draw! 🤝";
        gameStatusEl.style.color = "#6c757d";
      } else if (winner === playerSymbol) {
        message = "You win! 🎉";
        gameStatusEl.style.color = "#28a745";
      } else {
        message = "You lose 😢";
        gameStatusEl.style.color = "#dc3545";
      }

      if (reason === 'timeout') {
        message += " (Time ran out)";
      } else if (reason === 'opponent_disconnect') {
        message += " (Opponent disconnected)";
      }

      gameStatusEl.textContent = message;
      turnEl.textContent = "Game finished";
      showNewGameButton();
    });

    socket.on('opponentDisconnected', () => {
      console.log('Opponent disconnected');
      opponentConnected = false;
      opponentStatusEl.textContent = "Opponent disconnected - they have 10 seconds to reconnect or they lose";
      opponentStatusEl.className = "opponent-status opponent-disconnected";
      opponentStatusEl.style.display = "block";
      updateTurnIndicator();
    });

    socket.on('opponentReconnected', () => {
      console.log('Opponent reconnected');
      opponentConnected = true;
      opponentStatusEl.textContent = "Opponent reconnected";
      opponentStatusEl.className = "opponent-status opponent-connected";
      setTimeout(() => {
        opponentStatusEl.style.display = "none";
      }, 3000);
      updateTurnIndicator();
    });

    socket.on('errorMessage', (msg) => {
      console.error('Error:', msg);
      gameStatusEl.textContent = `Error: ${msg}`;
      gameStatusEl.style.color = "#dc3545";
    });

    socket.on('queueError', ({ message }) => {
      console.error('Queue error:', message);
      gameStatusEl.textContent = `Queue error: ${message}`;
      gameStatusEl.style.color = "#dc3545";
    });

    // click handler (sends makeMove which the server will use to commit time)
    boardEl.addEventListener('click', (e) => {
      if (!gameActive || currentTurn !== playerSymbol) return;

      const cell = e.target;
      if (!cell.classList.contains('cell') || cell.classList.contains('taken')) return;

      const index = parseInt(cell.dataset.index);
      if (isNaN(index)) return;

      console.log('Making move at index:', index);
      // emit move to server (server will calculate elapsed time based on its turnStartTime)
      socket.emit('makeMove', { gameId, index });

      // provide immediate feedback (visual)
      cell.style.background = '#e9ecef';
      setTimeout(() => {
        if (!cell.classList.contains('taken')) {
          cell.style.background = 'white';
        }
      }, 200);
    });

    // keyboard support (unchanged)
    document.addEventListener('keydown', (e) => {
      if (!gameActive || currentTurn !== playerSymbol) return;

      const key = e.key;
      let index = -1;

      if (key >= '1' && key <= '9') {
        index = parseInt(key) - 1;
      } else if (key >= '0' && key <= '8') {
        index = parseInt(key);
      }

      if (index >= 0 && index <= 8) {
        const cell = boardEl.children[index];
        if (cell && !cell.classList.contains('taken')) {
          cell.click();
        }
      }
    });

    // cleanup on unload
    window.addEventListener('beforeunload', () => {
      stopLocalCountdown();
    });
  </script>
</body>
</html>